/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.epam.training.fooddelivery.api;

import com.epam.training.fooddelivery.model.CartModel;
import com.epam.training.fooddelivery.model.OrderModel;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-12T16:41:56.404299400+03:00[Europe/Minsk]")
@Validated
@Api(value = "orderservice", description = "the orderservice API")
public interface OrderserviceApi {

    /**
     * POST /orderservice/orders : The created order from the cart
     *
     * @param cartModel CartModel (optional)
     * @return Created order from the cart (status code 200)
     *         or The cart is empty (status code 400)
     *         or The balance of the customer is not enough (status code 401)
     */
    @ApiOperation(value = "The created order from the cart", nickname = "createOrder", notes = "", response = OrderModel.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Created order from the cart", response = OrderModel.class),
        @ApiResponse(code = 400, message = "The cart is empty"),
        @ApiResponse(code = 401, message = "The balance of the customer is not enough") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/orderservice/orders",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<OrderModel> createOrder(@ApiParam(value = "CartModel") @Valid @RequestBody(required = false) CartModel cartModel);


    /**
     * GET /orderservice/orders : List of authenticated customer&#39;s orders
     *
     * @return Customer orders (status code 200)
     */
    @ApiOperation(value = "List of authenticated customer's orders", nickname = "getCustomerOrders", notes = "", response = OrderModel.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Customer orders", response = OrderModel.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orderservice/orders",
        produces = { "application/json" }
    )
    ResponseEntity<List<OrderModel>> getCustomerOrders();


    /**
     * GET /orderservice/orders/{orderId} : Get order by id
     *
     * @param orderId The ID of the order to return. (required)
     * @return An order object (status code 200)
     *         or The order exists but does not belong to the authenticated customer (status code 403)
     *         or The order does not exist (status code 404)
     */
    @ApiOperation(value = "Get order by id", nickname = "getOrderById", notes = "", response = OrderModel.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "An order object", response = OrderModel.class),
        @ApiResponse(code = 403, message = "The order exists but does not belong to the authenticated customer"),
        @ApiResponse(code = 404, message = "The order does not exist") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orderservice/orders/{orderId}",
        produces = { "application/json" }
    )
    ResponseEntity<OrderModel> getOrderById(@ApiParam(value = "The ID of the order to return.", required = true) @PathVariable("orderId") Long orderId);

}
