/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.epam.training.fooddelivery.api;

import com.epam.training.fooddelivery.model.CartModel;
import com.epam.training.fooddelivery.model.OrderModel;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-18T19:12:13.004527200+03:00[Europe/Minsk]")
@Validated
@Api(value = "orderservice", description = "the orderservice API")
public interface OrderserviceApi {

    /**
     * POST /orderservice/orders : Create order from the cart of body
     * Create order
     *
     * @param cartModel Send new cart (optional)
     * @return Order created successfully (status code 200)
     *         or The cart is empty (status code 400)
     *         or Balance of authenticated customer is not enough (status code 405)
     */
    @ApiOperation(value = "Create order from the cart of body", nickname = "createOrder", notes = "Create order", response = OrderModel.class, tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Order created successfully", response = OrderModel.class),
        @ApiResponse(code = 400, message = "The cart is empty"),
        @ApiResponse(code = 405, message = "Balance of authenticated customer is not enough") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/orderservice/orders",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<OrderModel> createOrder(@ApiParam(value = "Send new cart") @Valid @RequestBody(required = false) CartModel cartModel);


    /**
     * GET /orderservice/orders : List orders of authenticated customer
     * Show list of all orders in customer
     *
     * @return A list of authenticated customer&#39;s orders (status code 200)
     */
    @ApiOperation(value = "List orders of authenticated customer", nickname = "getCustomerOrders", notes = "Show list of all orders in customer", response = OrderModel.class, responseContainer = "List", tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of authenticated customer's orders", response = OrderModel.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orderservice/orders",
        produces = { "application/json" }
    )
    ResponseEntity<List<OrderModel>> getCustomerOrders();


    /**
     * GET /orderservice/orders/{orderId} : Get order of authenticated customer by orderId
     *
     * @param orderId ID of order to return (required)
     * @return Order by orderId (status code 200)
     *         or the order exists but does not belong to the authenticated customer (status code 403)
     *         or the order does not exist (status code 404)
     */
    @ApiOperation(value = "Get order of authenticated customer by orderId", nickname = "getOrderById", notes = "", response = OrderModel.class, tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Order by orderId", response = OrderModel.class),
        @ApiResponse(code = 403, message = "the order exists but does not belong to the authenticated customer"),
        @ApiResponse(code = 404, message = "the order does not exist") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orderservice/orders/{orderId}",
        produces = { "application/json" }
    )
    ResponseEntity<OrderModel> getOrderById(@ApiParam(value = "ID of order to return", required = true) @PathVariable("orderId") Long orderId);

}
